%h1="Details"
%p
  While Nchan is designed to be straightforward to configure and use, it has its quirks. Some are the result of being a module for a general-purpose web server, some are features that have not yet been implemented, and others are there to expose extra features for the brave developer.

%a#publisher-endpoint-configs(href="#publisher-endpoint-configs")
  %h2="Publisher Endpoints, Locations, and Configurations"

:markdown
  *A channel's configuration is set to the that of its last-used publishing location.*

  Recall that Nchan configuration maps server *locations* to channel publisher and subscriber *endpoints*. Most of the time, you'll want just one publisher and one subscriber endpoint per channel. But what if differently configured publisher endpoints map to the same channel?
  
  Let's say you have the following configuration:

  ```nginx
    location = /pub/nobuffer {
      nchan_publisher;
      nchan_channel_id foo;
      nchan_store_messages off;
    }
    
    location = /pub/bigbuffer {
      nchan_publisher;
      nchan_channel_id foo;
      nchan_message_buffer_length 30;
      nchan_message_timeout 10m;
    }
    
    location = /sub/weird_settings {
      nchan_subscriber;
      nchan_channel_id foo;
      nchan_subscriber_first_message oldest;
    }
  ``` 

  Let's also assume I have two command-line scripts, [`pub.rb`](https://github.com/slact/nchan/blob/master/dev/pub.rb) and [`sub.rb`](https://github.com/slact/nchan/blob/master/dev/sub.rb) for publishing and subscribing respectively.
  
  What happens if you publish to the channel `foo` from different locations, say, first through `POST /pub/bigbuffer`, then `POST /pub/nobuffer`?
  
  ```console
  > ./pub.rb --response --once --message "msg1" /pub/bigbuffer
   Publishing to http://localhost:8082/pub/bigbuffer.
   202
   queued messages: 1
   last requested: 0 sec. ago (-1=never)
   active subscribers: 0
  
  > ./pub.rb --response --once --message "msg2" /pub/bigbuffer
   Publishing to http://localhost:8082/pub/bigbuffer.
   202
   queued messages: 2
   last requested: 4 sec. ago (-1=never)
   active subscribers: 0
  
  > ./pub.rb --response --once --message "msg3" /pub/bigbuffer
   Publishing to http://localhost:8082/pub/bigbuffer. 
   202
   queued messages: 3
   last requested: 10 sec. ago (-1=never)
   active subscribers: 0
  
  > ./sub.rb --id /sub/weird_settings                       
   Subscribing 1 longpoll client to http://localhost:80/sub/weird_settings.
   Timeout: 60sec, quit msg: FIN
   <1449346161:0> msg1
   <1449346165:0> msg2
   <1449346171:0> msg3
  ^C^C
  
  > ./pub.rb --response --once --message "nomsg" /pub/nobuffer
   Publishing to http://localhost:8082/pub/nobuffer.
   201
   queued messages: 0
   last requested: 5 sec. ago (-1=never)
   active subscribers: 0
  
  > ./sub.rb --id /sub/weird_settings                         
   Subscribing 1 longpoll client to http://localhost:80/sub/weird_settings.
   Timeout: 60sec, quit msg: FIN
   ^C^C
  
  > ./pub.rb --response --once --message "another1" /pub/bigbuffer
   Publishing to http://localhost:8082/pub/bigbuffer.
   202
   queued messages: 1
   last requested: 9 sec. ago (-1=never)
   active subscribers: 0
  
  > ./pub.rb --response --once --message "another2" /pub/bigbuffer
   Publishing to http://localhost:8082/pub/bigbuffer.
   202
   queued messages: 2
   last requested: 12 sec. ago (-1=never)
   active subscribers: 0
  
  > ./sub.rb --id /sub/weird_settings
   Subscribing 1 longpoll client to http://localhost:8082/sub/weird_settings.
   Timeout: 60sec, quit msg: FIN
   <1449346804:0> another1
   <1449346809:0> another2
  ^C^C
  ```
  
  
  All messages published before publishing to `/pub/nobuffer` are deleted, because the request to `/pub/nobuffer` disables the channel `foo`'s message buffer, clearing out all its' stored messages. Publishing to `/pub/bigbuffer` afterwards restored message storage, as this applied that location's config to the channel `foo`.
  
  This applies to all publishing-related configuration settings, which at present are  
  - `nchan_message_buffer_length`
  - `nchan_message_timeout`
  - `nchan_use_redis`
  
  So, if you want a channel to behave consistently, and want to publish to it from multiple locations, *make sure those locations have the same configuration*.
  
  You can also can use differently-configured publisher locations to dynamically update a channel's message retention settings. This can be used to erase messages or to scale an existing channel's message retention as desired.

%a#securing-channels(href="#securing-channels")
  %h2="Securing Channels"
:markdown
  ### Securing Publisher Endpoints
  Consider the use case of an application where authenticated users each use a private, dedicated channel for live updates. The configuration might look like this:
  
  ```nginx
  http {
    server {
      #available only on localhost
      listen  127.0.0.1  8080;
      location ~ /pub/(\w+)$ {
        nchan_publisher;
        nchan_channel_group my_app_group;
        nchan_channel_id $1;
      }
    }
    
    server {
      #available to the world
      listen 80;
      location ~/sub/(\w+)$ {
        nchan_subscriber;
        nchan_channel_group my_app_group;
        nchan_channel_id $1;
      }
    }
  }
  
  ```

  Here, the subscriber endpoint is available on a public-facing port 80, and the publisher endpoint is only available on localhost, so can be accessed only by applications residing on that machine.
  
  ### Keeping the Channel Private
  
  A Channel ID that is meant to be private should be treated with the same care as a session ID token. Considering the above use case of one-channel-per-user, how can we ensure that only the authenticated user, and no one else, is able to access his channel? 
  
  First, if you intend on securing the channel contents, you must use TLS/SSL:
  
  ```nginx 
  http {
    server {
      #available only on localhost
      listen  127.0.0.1  8080;
      #...publisher endpoint config
    }
    server {
      #available to the world
      listen 443;
      #SSL config goes here
      location ~/sub/(\w+)$ {
        nchan_subscriber;
        nchan_channel_group my_app_group;
        nchan_channel_id $1;
      }
    }
  }
  
  ```
  
  Now that you have a secure connection between the subscriber client and the server, you don't need to worry about the channel ID or messages being passively intercepted. This is a minimum requirement for secure message delivery, but it is not sufficient. 
  
  You must also take care to do at least one of the following:
    - [Generate good, high-entropy Channel IDs](#generating-good-channel-ids).
    - [Authorize all subscribers with the `nchan_authorize_request` config directive](#authentication-with-nchan_authorize_request).
    - [Authorize subscribers and hide channel IDs with the "`X-Accel-Redirect`" mechanism](#authenticate-and-hide-the-channel-id-with-x-accel-redirect).
    
  #### Generating Good Channel IDs
  
  An ID that can be guessed is an ID that can be hijacked. If you are not authenticating subscribers (as described below), a channel ID should be impossible to guess. Use at least 128 bits of entropy to generate a random token, associate it with the authenticated user, and share it only with the user's client. Do not reuse tokens, just as you would not reuse session IDs.
  
  #### Authentication with `nchan_authorize_request`
  
  **DOCUMENTATION IN PROGRESS**  
  
  Like `auth_request` module.
  
  #### Authenticate and hide the channel ID with X-Accel-Redirect
  
  **DOCUMENTATION IN PROGRESS**  
  
  This one's a little tricky. 


%a#websocket(href="#websocket")
  %h2="Websocket"
:markdown
  **DOCUMENTATION IN PROGRESS**  
  
  - unsupported features

%a#using-redis(href="#using-redis")
  %h2="Using Redis"
:markdown
  **DOCUMENTATION IN PROGRESS**  
  
  - benefits
  - drawbacks
  - horizontal scaling across many nginx instances
  - future cluster support
